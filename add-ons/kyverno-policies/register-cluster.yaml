---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: register-tenant-cluster
  annotations:
    policies.kyverno.io/title: Argo Cluster Secret Registration
    policies.kyverno.io/category: Argo
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Secret
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/minversion: 1.10.0
    kyverno.io/kubernetes-version: "1.25"
    policies.kyverno.io/description: >-
      This policy registers newly created CAPI clusters with ArgoCD
spec:
  rules:
    - name: generate-secret
      skipBackgroundRequests: true
      match:
        all:
          - resources:
              kinds:
                - Secret
              names:
                - "*-kubeconfig"
              namespaces:
                - "tenant-*"
      context:
        - name: clusterName
          variable:
            value: "{{ replace_all('{{request.object.metadata.name}}', '-kubeconfig', '') }}"
            jmesPath: 'to_string(@)'
        - name: k8s_version
          apiCall:
            urlPath: "/apis/cluster.x-k8s.io/v1alpha4/namespaces/{{request.namespace}}/clusters/{{ clusterName }}"
            jmesPath: "metadata.labels.k8s_version"
            method: GET
        - name: serverName
          variable:
            value: "{{  request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
            jmesPath: 'to_string(@)'
        - name: hostName
          variable:
            value: '{{  request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}'
            jmesPath: "to_string(@) | split(@, '://')[1] | split(@, ':')[0]"
        - name: certData
          variable:
            value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-certificate-data\" }}"
            jmesPath: 'to_string(@)'
        - name: keyData
          variable:
            value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-key-data\" }}"
            jmesPath: 'to_string(@)'
        - name: caData
          variable:
            value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
            jmesPath: 'to_string(@)'
        - name: extraLabels
          variable:
            value:
              argocd.argoproj.io/secret-type: cluster
              clusterId: "{{ clusterName }}"
              clusterType: "tenant"
              k8s_version: "{{ k8s_version }}"
              hostName: "{{ hostName }}"
        - name: dataConfig
          variable:
            value: |
              {
                "tlsClientConfig": {
                  "insecure": false,
                  "certData": "{{ certData }}",
                  "keyData": "{{ keyData }}",
                  "caData": "{{ caData }}"
                }
              }
            jmesPath: 'to_string(@)'
      generate:
        synchronize: true
        apiVersion: v1
        kind: Secret
        name: "{{ clusterName }}"
        namespace: argocd
        data:
          metadata:
            annotations:
              managed-by: argocd.argoproj.io
            labels:
              "{{ extraLabels }}"
          type: Opaque
          data:
            name: "{{ clusterName | base64_encode(@) }}"
            server: "{{ serverName | base64_encode(@) }}"
            config: "{{ dataConfig | base64_encode(@) }}"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: register-host-cluster
  annotations:
    policies.kyverno.io/title: Argo Cluster Secret Registration
    policies.kyverno.io/category: Argo
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Secret
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/minversion: 1.10.0
    kyverno.io/kubernetes-version: "1.25"
    policies.kyverno.io/description: >-
      This policy registers newly created CAPI clusters with ArgoCD
spec:
  rules:
    - name: generate-secret
      skipBackgroundRequests: true
      match:
        all:
          - resources:
              kinds:
                - Secret
              names:
                - "*-kubeconfig"
              namespaces:
                - "host-*"
      context:
        - name: clusterName
          variable:
            value: "{{ replace_all('{{request.object.metadata.name}}', '-kubeconfig', '') }}"
            jmesPath: 'to_string(@)'
        - name: extraLabels
          variable:
            value:
              argocd.argoproj.io/secret-type: cluster
              clusterId: "{{ clusterName }}"
              clusterType: "host"
        - name: serverName
          variable:
            value: "{{  request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
            jmesPath: 'to_string(@)'
        - name: certData
          variable:
            value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-certificate-data\" }}"
            jmesPath: 'to_string(@)'
        - name: keyData
          variable:
            value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-key-data\" }}"
            jmesPath: 'to_string(@)'
        - name: caData
          variable:
            value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
            jmesPath: 'to_string(@)'
        - name: dataConfig
          variable:
            value: |
              {
                "tlsClientConfig": {
                  "insecure": false,
                  "certData": "{{ certData }}",
                  "keyData": "{{ keyData }}",
                  "caData": "{{ caData }}"
                }
              }
            jmesPath: 'to_string(@)'
      generate:
        synchronize: true
        apiVersion: v1
        kind: Secret
        name: "{{ clusterName }}"
        namespace: argocd
        data:
          metadata:
            annotations:
              managed-by: argocd.argoproj.io
            labels:
              "{{ extraLabels }}"
          type: Opaque
          data:
            name: "{{ clusterName | base64_encode(@) }}"
            server: "{{ serverName | base64_encode(@) }}"
            config: "{{ dataConfig | base64_encode(@) }}"
